networks:
  lora_net:

volumes:
  tsdb_data:
  prometheus_data:
  grafana_data:
  registry_data:

services:

  # ---------- Kafka (официальный образ, KRaft combined mode) ----------
  broker:
    image: apache/kafka:4.1.0
    container_name: broker
    networks: [lora_net]
    hostname: broker
    ports:
      - "9092:9092"   # внешний listener для приложений на хосте Windows
    environment:
      # Конфиг по образцу официальной документации (две пары listener’ов)
      KAFKA_BROKER_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # single-node dev параметры
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    # healthcheck: утилиты лежат в /opt/kafka/bin
    healthcheck:
      test: ["CMD", "bash", "-lc", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server broker:29092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 20

  # ---------- Kafka UI ----------
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    networks: [lora_net]
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8088:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092

  # ---------- Apicurio Registry (хранение схем в Kafka) ----------
  registry:
    image: apicurio/apicurio-registry-kafkasql:latest-release
    container_name: apicurio-registry
    networks: [lora_net]
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8081:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
      REGISTRY_KAFKASQL_TOPIC: apicurio-registry-storage
      REGISTRY_UI_FEATURES_READONLY: "false"
    volumes:
      - registry_data:/registry-data

  # ---------- TimescaleDB (Postgres + timescaledb) ----------
  timescaledb:
    image: timescale/timescaledb:2.15.1-pg15
    container_name: timescaledb
    networks: [lora_net]
    environment:
      POSTGRES_USER: smart
      POSTGRES_PASSWORD: smartpass
      POSTGRES_DB: smartreport
      TIMESCALEDB_TELEMETRY: "off"
    ports:
      - "55432:5432"
    volumes:
      - tsdb_data:/var/lib/postgresql/data
      - ./timescale/init:/docker-entrypoint-initdb.d

  # ---------- Prometheus ----------
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks: [lora_net]
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus

  # ---------- Grafana ----------
  grafana:
    image: grafana/grafana:10.4.0
    container_name: grafana
    networks: [lora_net]
    depends_on: [prometheus]
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_DEFAULT_THEME: light
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-provisioning/datasources:/etc/grafana/provisioning/datasources:ro
